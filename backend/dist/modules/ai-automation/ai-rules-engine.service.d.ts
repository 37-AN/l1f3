import { ConfigService } from '@nestjs/config';
import { AdvancedLoggerService } from '../../common/logger/advanced-logger.service';
import { MCPFrameworkService } from '../mcp-framework/mcp-framework.service';
import { AIRule, AutomationContext, ExecutionResult } from './interfaces/ai-automation.interface';
export declare class AIRulesEngineService {
    private readonly configService;
    private readonly advancedLogger;
    private readonly mcpFramework;
    private readonly logger;
    private rules;
    private executionHistory;
    constructor(configService: ConfigService, advancedLogger: AdvancedLoggerService, mcpFramework: MCPFrameworkService);
    private initializeDefaultRules;
    registerRule(rule: AIRule): void;
    executeScheduledRules(): Promise<void>;
    executeRule(ruleId: string, context: AutomationContext): Promise<ExecutionResult>;
    private evaluateConditions;
    private evaluateCondition;
    private executeActions;
    private executeAction;
    private executeNotificationAction;
    private executeTaskCreationAction;
    private executeDocumentUpdateAction;
    private executeCalculationAction;
    private executeExternalApiAction;
    private executeMCPSyncAction;
    private evaluateThresholdCondition;
    private evaluatePatternCondition;
    private evaluateTrendCondition;
    private evaluateAnomalyCondition;
    private evaluateScheduleCondition;
    private generateRecommendations;
    private shouldExecuteRule;
    private calculateNextExecution;
    private updateRuleMetadata;
    private storeExecutionHistory;
    getRules(): AIRule[];
    getRule(ruleId: string): AIRule | undefined;
    enableRule(ruleId: string): void;
    disableRule(ruleId: string): void;
    getExecutionHistory(ruleId: string): ExecutionResult[];
}
