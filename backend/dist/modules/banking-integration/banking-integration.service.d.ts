import { ConfigService } from '@nestjs/config';
import { AdvancedLoggerService } from '../../common/logger/advanced-logger.service';
import { MCPFrameworkService } from '../mcp-framework/mcp-framework.service';
import { AIAutomationService } from '../ai-automation/ai-automation.service';
import { FinancialGoalTrackerService } from '../ai-automation/financial-goal-tracker.service';
import { NedBankService } from './providers/nedbank.service';
import { OkraService } from './providers/okra.service';
import { TransactionCategorizationService } from './services/transaction-categorization.service';
import { FraudDetectionService } from './services/fraud-detection.service';
import { BankingInsightsService } from './services/banking-insights.service';
import { PaymentService } from './services/payment.service';
import { BankAccount, Transaction, BankConnection, TransactionSyncResult, BankingDashboard, SouthAfricanBankInfo } from './interfaces/banking.interface';
export declare class BankingIntegrationService {
    private readonly configService;
    private readonly advancedLogger;
    private readonly mcpFramework;
    private readonly aiAutomation;
    private readonly goalTracker;
    private readonly nedBankService;
    private readonly okraService;
    private readonly transactionCategorization;
    private readonly fraudDetection;
    private readonly bankingInsights;
    private readonly paymentService;
    private readonly logger;
    private connections;
    private accounts;
    private transactions;
    private southAfricanBanks;
    constructor(configService: ConfigService, advancedLogger: AdvancedLoggerService, mcpFramework: MCPFrameworkService, aiAutomation: AIAutomationService, goalTracker: FinancialGoalTrackerService, nedBankService: NedBankService, okraService: OkraService, transactionCategorization: TransactionCategorizationService, fraudDetection: FraudDetectionService, bankingInsights: BankingInsightsService, paymentService: PaymentService);
    private initializeBankingSystem;
    private loadSouthAfricanBanks;
    private initializeBankingProviders;
    connectBank(userId: string, bankId: string, connectionMethod?: 'direct' | 'okra'): Promise<BankConnection>;
    syncAccountData(connectionId: string): Promise<TransactionSyncResult[]>;
    private updateNetWorthFromAccounts;
    private updateGoalProgress;
    getBankingDashboard(userId: string): Promise<BankingDashboard>;
    scheduledAccountSync(): Promise<void>;
    scheduledFraudDetection(): Promise<void>;
    private createFraudAlert;
    getConnections(): BankConnection[];
    getAccounts(userId?: string): BankAccount[];
    getTransactions(accountId: string): Transaction[];
    getSouthAfricanBanks(): SouthAfricanBankInfo[];
    disconnectBank(connectionId: string): Promise<void>;
    getConnectionStatus(connectionId: string): Promise<BankConnection | undefined>;
}
